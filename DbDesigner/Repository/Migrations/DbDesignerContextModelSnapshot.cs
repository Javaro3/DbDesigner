// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(DbDesignerContext))]
    partial class DbDesignerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.Domain.Architecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Architectures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "An approach in which code interacts directly with the database, without the use of abstraction layers.",
                            Name = "Direct Data Access (DDA)"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A design pattern that provides an abstraction for working with data, allowing data access logic to be separated from business logic.",
                            Name = "Repository Pattern"
                        },
                        new
                        {
                            Id = 3,
                            Description = "An architectural pattern that separates state change operations (commands) from data requests (reads), ensuring their independence.",
                            Name = "Command Query Responsibility Segregation (CQRS)"
                        });
                });

            modelBuilder.Entity("Common.Domain.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SqlTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SqlTypeParams")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SqlTypeId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("Common.Domain.ColumnProperty", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.Property<string>("PropertyParams")
                        .HasColumnType("text");

                    b.HasKey("ColumnId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("ColumnProperties");
                });

            modelBuilder.Entity("Common.Domain.DataBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataBases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A commercial DBMS from Microsoft with deep integration into the Windows ecosystem and powerful analytical capabilities.",
                            Image = "MSSQL.png",
                            Name = "MSSQL"
                        },
                        new
                        {
                            Id = 2,
                            Description = "An open object-relational DBMS with support for complex queries, extensions and highly reliable transactions.",
                            Image = "PostgreSQL.png",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A popular and fast open DBMS, widely used in web applications due to its ease of configuration and cross-platform functionality.",
                            Image = "MySQL.png",
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A lightweight embedded DBMS that does not require a server, ideal for mobile applications and prototyping.",
                            Image = "SQLite.png",
                            Name = "SQLite"
                        });
                });

            modelBuilder.Entity("Common.Domain.DataBaseIndexType", b =>
                {
                    b.Property<int>("DataBaseId")
                        .HasColumnType("integer");

                    b.Property<int>("IndexTypeId")
                        .HasColumnType("integer");

                    b.HasKey("DataBaseId", "IndexTypeId");

                    b.HasIndex("IndexTypeId");

                    b.ToTable("DataBaseIndexTypes");

                    b.HasData(
                        new
                        {
                            DataBaseId = 1,
                            IndexTypeId = 1
                        },
                        new
                        {
                            DataBaseId = 1,
                            IndexTypeId = 2
                        },
                        new
                        {
                            DataBaseId = 1,
                            IndexTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 2,
                            IndexTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 3,
                            IndexTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 4,
                            IndexTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 1,
                            IndexTypeId = 4
                        },
                        new
                        {
                            DataBaseId = 3,
                            IndexTypeId = 4
                        },
                        new
                        {
                            DataBaseId = 4,
                            IndexTypeId = 4
                        },
                        new
                        {
                            DataBaseId = 2,
                            IndexTypeId = 5
                        },
                        new
                        {
                            DataBaseId = 3,
                            IndexTypeId = 5
                        },
                        new
                        {
                            DataBaseId = 4,
                            IndexTypeId = 5
                        },
                        new
                        {
                            DataBaseId = 2,
                            IndexTypeId = 6
                        },
                        new
                        {
                            DataBaseId = 3,
                            IndexTypeId = 6
                        });
                });

            modelBuilder.Entity("Common.Domain.DataBaseType", b =>
                {
                    b.Property<int>("DataBaseId")
                        .HasColumnType("integer");

                    b.Property<int>("SqlTypeId")
                        .HasColumnType("integer");

                    b.HasKey("DataBaseId", "SqlTypeId");

                    b.HasIndex("SqlTypeId");

                    b.ToTable("DataBaseTypes");

                    b.HasData(
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 1
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 1
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 1
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 2
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 2
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 2
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 2
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 3
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 4
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 5
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 5
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 5
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 6
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 6
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 6
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 7
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 7
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 7
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 8
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 8
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 9
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 10
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 10
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 10
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 11
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 11
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 11
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 12
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 12
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 12
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 12
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 13
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 13
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 13
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 14
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 15
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 16
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 16
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 16
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 17
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 18
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 18
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 18
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 19
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 19
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 19
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 19
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 20
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 20
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 20
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 20
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 21
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 21
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 21
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 21
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 22
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 22
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 22
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 22
                        },
                        new
                        {
                            DataBaseId = 1,
                            SqlTypeId = 23
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 24
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 24
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 24
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 25
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 25
                        },
                        new
                        {
                            DataBaseId = 4,
                            SqlTypeId = 26
                        },
                        new
                        {
                            DataBaseId = 3,
                            SqlTypeId = 26
                        },
                        new
                        {
                            DataBaseId = 2,
                            SqlTypeId = 26
                        });
                });

            modelBuilder.Entity("Common.Domain.Index", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IndexTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IndexTypeId");

                    b.ToTable("Indices");
                });

            modelBuilder.Entity("Common.Domain.IndexColumn", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("IndexId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId", "IndexId");

                    b.HasIndex("IndexId");

                    b.ToTable("IndexColumns");
                });

            modelBuilder.Entity("Common.Domain.IndexType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IndexTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Table data is sorted and physically stored in the order specified by the index.",
                            Name = "Clustered Index"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Contains pointers to data, rather than the data itself.",
                            Name = "Non-Clustered Index"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ensures that values in a column or set of columns are unique.",
                            Name = "Unique Index"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Used to search text in large text data.",
                            Name = "Full-Text Index"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The standard index for most search operations.",
                            Name = "B-tree Index"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Index for quick search by exact value.",
                            Name = "Hash Index"
                        });
                });

            modelBuilder.Entity("Common.Domain.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "An object-oriented programming language from Microsoft, widely used for developing enterprise applications, games and web services.",
                            Image = "cs.png",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A high-level programming language with a simple syntactic structure, popular for development, automation, data analysis and machine learning.",
                            Image = "py.png",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A scripting language for developing interactive web pages, also actively used in server and mobile applications.",
                            Image = "js.png",
                            Name = "JavaScript"
                        });
                });

            modelBuilder.Entity("Common.Domain.LanguageOrm", b =>
                {
                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("OrmId")
                        .HasColumnType("integer");

                    b.HasKey("LanguageId", "OrmId");

                    b.HasIndex("OrmId");

                    b.ToTable("LanguageOrms");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            OrmId = 1
                        },
                        new
                        {
                            LanguageId = 1,
                            OrmId = 2
                        },
                        new
                        {
                            LanguageId = 1,
                            OrmId = 3
                        },
                        new
                        {
                            LanguageId = 2,
                            OrmId = 4
                        },
                        new
                        {
                            LanguageId = 2,
                            OrmId = 5
                        },
                        new
                        {
                            LanguageId = 2,
                            OrmId = 6
                        },
                        new
                        {
                            LanguageId = 2,
                            OrmId = 7
                        },
                        new
                        {
                            LanguageId = 3,
                            OrmId = 8
                        },
                        new
                        {
                            LanguageId = 3,
                            OrmId = 9
                        });
                });

            modelBuilder.Entity("Common.Domain.LanguageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LanguageTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "C# byte",
                            LanguageId = 1,
                            Name = "byte"
                        },
                        new
                        {
                            Id = 2,
                            Description = "C# short",
                            LanguageId = 1,
                            Name = "short"
                        },
                        new
                        {
                            Id = 3,
                            Description = "C# int",
                            LanguageId = 1,
                            Name = "int"
                        },
                        new
                        {
                            Id = 4,
                            Description = "C# long",
                            LanguageId = 1,
                            Name = "long"
                        },
                        new
                        {
                            Id = 5,
                            Description = "C# bool",
                            LanguageId = 1,
                            Name = "bool"
                        },
                        new
                        {
                            Id = 6,
                            Description = "C# decimal",
                            LanguageId = 1,
                            Name = "decimal"
                        },
                        new
                        {
                            Id = 7,
                            Description = "C# float",
                            LanguageId = 1,
                            Name = "float"
                        },
                        new
                        {
                            Id = 8,
                            Description = "C# DateTime",
                            LanguageId = 1,
                            Name = "DateTime"
                        },
                        new
                        {
                            Id = 9,
                            Description = "C# Time",
                            LanguageId = 1,
                            Name = "Time"
                        },
                        new
                        {
                            Id = 10,
                            Description = "C# DateTimeOffset",
                            LanguageId = 1,
                            Name = "DateTimeOffset"
                        },
                        new
                        {
                            Id = 11,
                            Description = "C# string",
                            LanguageId = 1,
                            Name = "string"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Python int",
                            LanguageId = 2,
                            Name = "int"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Python bool",
                            LanguageId = 2,
                            Name = "bool"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Python Decimal",
                            LanguageId = 2,
                            Name = "Decimal"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Python Float",
                            LanguageId = 2,
                            Name = "Float"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Python datetime",
                            LanguageId = 2,
                            Name = "datetime"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Python str",
                            LanguageId = 2,
                            Name = "str"
                        },
                        new
                        {
                            Id = 18,
                            Description = "JavaScript number",
                            LanguageId = 3,
                            Name = "number"
                        },
                        new
                        {
                            Id = 19,
                            Description = "JavaScript BigInt",
                            LanguageId = 3,
                            Name = "BigInt"
                        },
                        new
                        {
                            Id = 20,
                            Description = "JavaScript boolean",
                            LanguageId = 3,
                            Name = "boolean"
                        },
                        new
                        {
                            Id = 21,
                            Description = "JavaScript Date",
                            LanguageId = 3,
                            Name = "Date"
                        },
                        new
                        {
                            Id = 22,
                            Description = "JavaScript string",
                            LanguageId = 3,
                            Name = "string"
                        });
                });

            modelBuilder.Entity("Common.Domain.LanguageTypeSqlType", b =>
                {
                    b.Property<int>("LanguageTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("SqlTypeId")
                        .HasColumnType("integer");

                    b.HasKey("LanguageTypeId", "SqlTypeId");

                    b.HasIndex("SqlTypeId");

                    b.ToTable("LanguageTypeSqlTypes");

                    b.HasData(
                        new
                        {
                            LanguageTypeId = 1,
                            SqlTypeId = 1
                        },
                        new
                        {
                            LanguageTypeId = 2,
                            SqlTypeId = 1
                        },
                        new
                        {
                            LanguageTypeId = 3,
                            SqlTypeId = 1
                        },
                        new
                        {
                            LanguageTypeId = 3,
                            SqlTypeId = 24
                        },
                        new
                        {
                            LanguageTypeId = 3,
                            SqlTypeId = 25
                        },
                        new
                        {
                            LanguageTypeId = 4,
                            SqlTypeId = 4
                        },
                        new
                        {
                            LanguageTypeId = 5,
                            SqlTypeId = 5
                        },
                        new
                        {
                            LanguageTypeId = 5,
                            SqlTypeId = 26
                        },
                        new
                        {
                            LanguageTypeId = 6,
                            SqlTypeId = 6
                        },
                        new
                        {
                            LanguageTypeId = 6,
                            SqlTypeId = 8
                        },
                        new
                        {
                            LanguageTypeId = 6,
                            SqlTypeId = 9
                        },
                        new
                        {
                            LanguageTypeId = 6,
                            SqlTypeId = 7
                        },
                        new
                        {
                            LanguageTypeId = 7,
                            SqlTypeId = 11
                        },
                        new
                        {
                            LanguageTypeId = 8,
                            SqlTypeId = 12
                        },
                        new
                        {
                            LanguageTypeId = 8,
                            SqlTypeId = 14
                        },
                        new
                        {
                            LanguageTypeId = 8,
                            SqlTypeId = 16
                        },
                        new
                        {
                            LanguageTypeId = 8,
                            SqlTypeId = 17
                        },
                        new
                        {
                            LanguageTypeId = 9,
                            SqlTypeId = 13
                        },
                        new
                        {
                            LanguageTypeId = 10,
                            SqlTypeId = 15
                        },
                        new
                        {
                            LanguageTypeId = 11,
                            SqlTypeId = 18
                        },
                        new
                        {
                            LanguageTypeId = 11,
                            SqlTypeId = 19
                        },
                        new
                        {
                            LanguageTypeId = 11,
                            SqlTypeId = 20
                        },
                        new
                        {
                            LanguageTypeId = 11,
                            SqlTypeId = 21
                        },
                        new
                        {
                            LanguageTypeId = 11,
                            SqlTypeId = 22
                        },
                        new
                        {
                            LanguageTypeId = 11,
                            SqlTypeId = 23
                        },
                        new
                        {
                            LanguageTypeId = 12,
                            SqlTypeId = 1
                        },
                        new
                        {
                            LanguageTypeId = 12,
                            SqlTypeId = 2
                        },
                        new
                        {
                            LanguageTypeId = 12,
                            SqlTypeId = 3
                        },
                        new
                        {
                            LanguageTypeId = 12,
                            SqlTypeId = 4
                        },
                        new
                        {
                            LanguageTypeId = 12,
                            SqlTypeId = 24
                        },
                        new
                        {
                            LanguageTypeId = 12,
                            SqlTypeId = 25
                        },
                        new
                        {
                            LanguageTypeId = 13,
                            SqlTypeId = 5
                        },
                        new
                        {
                            LanguageTypeId = 13,
                            SqlTypeId = 26
                        },
                        new
                        {
                            LanguageTypeId = 14,
                            SqlTypeId = 6
                        },
                        new
                        {
                            LanguageTypeId = 14,
                            SqlTypeId = 7
                        },
                        new
                        {
                            LanguageTypeId = 14,
                            SqlTypeId = 8
                        },
                        new
                        {
                            LanguageTypeId = 14,
                            SqlTypeId = 9
                        },
                        new
                        {
                            LanguageTypeId = 15,
                            SqlTypeId = 10
                        },
                        new
                        {
                            LanguageTypeId = 15,
                            SqlTypeId = 11
                        },
                        new
                        {
                            LanguageTypeId = 16,
                            SqlTypeId = 12
                        },
                        new
                        {
                            LanguageTypeId = 16,
                            SqlTypeId = 16
                        },
                        new
                        {
                            LanguageTypeId = 16,
                            SqlTypeId = 14
                        },
                        new
                        {
                            LanguageTypeId = 16,
                            SqlTypeId = 15
                        },
                        new
                        {
                            LanguageTypeId = 16,
                            SqlTypeId = 17
                        },
                        new
                        {
                            LanguageTypeId = 17,
                            SqlTypeId = 18
                        },
                        new
                        {
                            LanguageTypeId = 17,
                            SqlTypeId = 19
                        },
                        new
                        {
                            LanguageTypeId = 17,
                            SqlTypeId = 20
                        },
                        new
                        {
                            LanguageTypeId = 17,
                            SqlTypeId = 21
                        },
                        new
                        {
                            LanguageTypeId = 17,
                            SqlTypeId = 22
                        },
                        new
                        {
                            LanguageTypeId = 17,
                            SqlTypeId = 23
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 1
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 2
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 3
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 6
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 7
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 8
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 9
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 10
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 11
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 24
                        },
                        new
                        {
                            LanguageTypeId = 18,
                            SqlTypeId = 25
                        },
                        new
                        {
                            LanguageTypeId = 19,
                            SqlTypeId = 4
                        },
                        new
                        {
                            LanguageTypeId = 20,
                            SqlTypeId = 5
                        },
                        new
                        {
                            LanguageTypeId = 20,
                            SqlTypeId = 26
                        },
                        new
                        {
                            LanguageTypeId = 21,
                            SqlTypeId = 12
                        },
                        new
                        {
                            LanguageTypeId = 21,
                            SqlTypeId = 14
                        },
                        new
                        {
                            LanguageTypeId = 21,
                            SqlTypeId = 16
                        },
                        new
                        {
                            LanguageTypeId = 21,
                            SqlTypeId = 17
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 13
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 15
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 18
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 19
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 20
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 21
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 22
                        },
                        new
                        {
                            LanguageTypeId = 22,
                            SqlTypeId = 23
                        });
                });

            modelBuilder.Entity("Common.Domain.Orm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "An ORM for C# and .NET that provides a high level of abstraction for working with databases, allowing you to use LINQ for queries.",
                            Name = "Entity Framework"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A lightweight mixin for C# that provides high-performance access to databases with minimal wrapper around SQL queries.",
                            Name = "Dapper"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A powerful ORM for C# with extensive customization capabilities for mapping objects to relational databases.",
                            Name = "NHibernate"
                        },
                        new
                        {
                            Id = 4,
                            Description = "A popular ORM for Python that supports powerful mapping and database schema management.",
                            Name = "SQLAlchemy"
                        },
                        new
                        {
                            Id = 5,
                            Description = "A built-in ORM in Django that provides a high-level abstraction for working with databases in Python web applications.",
                            Name = "Django ORM"
                        },
                        new
                        {
                            Id = 6,
                            Description = "An asynchronous ORM for Python designed to work with databases using Django ORM-like syntax.",
                            Name = "Tortoise ORM"
                        },
                        new
                        {
                            Id = 7,
                            Description = "A lightweight ORM for Python that offers a simple and intuitive model for working with databases.",
                            Name = "Peewee"
                        },
                        new
                        {
                            Id = 8,
                            Description = "ORM for Node.js with support for various relational databases and a powerful interface for working with SQL queries.",
                            Name = "Sequelize"
                        },
                        new
                        {
                            Id = 9,
                            Description = "ORM for TypeScript and JavaScript, providing support for TypeScript annotations and work with multiple relational databases.",
                            Name = "TypeORM"
                        });
                });

            modelBuilder.Entity("Common.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DataBaseId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DataBaseId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Common.Domain.ProjectTable", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "TableId");

                    b.HasIndex("TableId");

                    b.ToTable("ProjectTables");
                });

            modelBuilder.Entity("Common.Domain.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("HasParams")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Prevents a column from being NULL.",
                            HasParams = false,
                            Name = "NOT NULL"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sets the default value for the column if no value is specified during data insertion.",
                            HasParams = true,
                            Name = "DEFAULT"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Defines the column as a primary key, which must be unique for each row and not contain NULLs.",
                            HasParams = false,
                            Name = "PRIMARY KEY"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Automatically increments the column value with each new entry. Typically used with primary keys.",
                            HasParams = false,
                            Name = "INCREMENT"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ensures that the values in a column are unique. You cannot insert duplicate values.",
                            HasParams = false,
                            Name = "UNIQUE"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Defines a condition that column values must meet.",
                            HasParams = true,
                            Name = "CHECK"
                        });
                });

            modelBuilder.Entity("Common.Domain.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OnDeleteId")
                        .HasColumnType("integer");

                    b.Property<int>("OnUpdateId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetColumnId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OnDeleteId");

                    b.HasIndex("OnUpdateId");

                    b.HasIndex("SourceColumnId");

                    b.HasIndex("TargetColumnId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Common.Domain.RelationAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RelationActions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "When you delete or update a parent record, the associated child records are automatically deleted or updated.",
                            Name = "CASCADE"
                        },
                        new
                        {
                            Id = 2,
                            Description = "When a parent record is deleted or updated, the corresponding foreign keys in the child records are set to NULL.",
                            Name = "SET NULL"
                        },
                        new
                        {
                            Id = 3,
                            Description = "When a parent record is deleted or updated, the foreign keys in the child records are set to the default value.",
                            Name = "SET DEFAULT"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Prevents a parent record from being deleted or updated if there are associated child records.",
                            Name = "RESTRICT"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Similar to RESTRICT, but data integrity checks are performed later, after all transaction actions.",
                            Name = "NO ACTION"
                        });
                });

            modelBuilder.Entity("Common.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Common.Domain.SqlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("HasParams")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SqlTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "number from 0 to 255",
                            HasParams = false,
                            Name = "tinyint"
                        },
                        new
                        {
                            Id = 2,
                            Description = "number from 0 to 65 535",
                            HasParams = false,
                            Name = "smallint"
                        },
                        new
                        {
                            Id = 3,
                            Description = "number from 0 to 2 147 483 647",
                            HasParams = false,
                            Name = "int"
                        },
                        new
                        {
                            Id = 4,
                            Description = "number from 0 to 2E64-1",
                            HasParams = false,
                            Name = "bigint"
                        },
                        new
                        {
                            Id = 5,
                            Description = "number from 0 to 1",
                            HasParams = false,
                            Name = "bit"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Numbers with fixed precision and scale. If maximum precision is used, valid values are in the -10^38 + 1 range 10^38 - 1.",
                            HasParams = true,
                            Name = "decimal"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Numbers with fixed precision and scale. If maximum precision is used, valid values are in the -10^38 + 1 range 10^38 - 1.",
                            HasParams = true,
                            Name = "numeric"
                        },
                        new
                        {
                            Id = 8,
                            Description = "number from –922,337,203,685,477.5808 to 922,337,203,685,477.5807",
                            HasParams = false,
                            Name = "money"
                        },
                        new
                        {
                            Id = 9,
                            Description = "number from -214 748,3648 to 214 748,3647",
                            HasParams = false,
                            Name = "smallmoney"
                        },
                        new
                        {
                            Id = 10,
                            Description = "number from -1,79E+308 to 1,79E+308",
                            HasParams = false,
                            Name = "float"
                        },
                        new
                        {
                            Id = 11,
                            Description = "number from -1,79E+308 to 1,79E+308",
                            HasParams = false,
                            Name = "real"
                        },
                        new
                        {
                            Id = 12,
                            Description = "date type",
                            HasParams = false,
                            Name = "date"
                        },
                        new
                        {
                            Id = 13,
                            Description = "time type",
                            HasParams = false,
                            Name = "time"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Specifies a date that includes the time of day in 24-hour format",
                            HasParams = false,
                            Name = "datetime2"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Defines a date that is combined with the time of day and adds time zone awareness based on Coordinated Universal Time (UTC).",
                            HasParams = false,
                            Name = "datetimeoffset"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Avoid using date and time for new work. Use date, date, datetime2, and datetimeoffset data types instead.",
                            HasParams = false,
                            Name = "datetime"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Specifies a date that matches the time of day. Time is presented in 24-hour format with seconds always set to zero (:00), and no fractional seconds.",
                            HasParams = false,
                            Name = "smalldatetime"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Fixed-size string data. n specifies the size of the string in bytes and must be a value between 1 and 8000",
                            HasParams = true,
                            Name = "char"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Fixed-size string data. n specifies the size of the string in bytes and must be a value between 1 and 8000",
                            HasParams = true,
                            Name = "varchar"
                        },
                        new
                        {
                            Id = 20,
                            Description = "This is a fixed and variable length data type designed to store character and binary data in Unicode format",
                            HasParams = false,
                            Name = "text"
                        },
                        new
                        {
                            Id = 21,
                            Description = "This is a fixed and variable length data type designed to store character and binary data in Unicode format",
                            HasParams = true,
                            Name = "nchar"
                        },
                        new
                        {
                            Id = 22,
                            Description = "This is a fixed and variable length data type designed to store character and binary data in Unicode format",
                            HasParams = true,
                            Name = "nvarchar"
                        },
                        new
                        {
                            Id = 23,
                            Description = "This is a fixed and variable length data type designed to store character and binary data in Unicode format",
                            HasParams = false,
                            Name = "ntext"
                        },
                        new
                        {
                            Id = 24,
                            Description = "signed four-byte integer",
                            HasParams = false,
                            Name = "integer"
                        },
                        new
                        {
                            Id = 25,
                            Description = "A medium integer. Signed range is from -8388608 to 8388607.",
                            HasParams = false,
                            Name = "mediumint"
                        },
                        new
                        {
                            Id = 26,
                            Description = "logical Boolean (true/false)",
                            HasParams = false,
                            Name = "boolean"
                        });
                });

            modelBuilder.Entity("Common.Domain.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Common.Domain.TableColumn", b =>
                {
                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.HasKey("ColumnId", "TableId");

                    b.HasIndex("TableId");

                    b.ToTable("TableColumns");
                });

            modelBuilder.Entity("Common.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 11, 28, 22, 15, 46, 265, DateTimeKind.Utc).AddTicks(810),
                            Email = "admin@gmail.com",
                            Name = "admin",
                            PasswordHash = "$2a$11$sHS5pDpUKamAP/k2seAoyuxHR13MRvo0QcruS5C41RczBhq.ATkvO"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 11, 28, 22, 15, 46, 424, DateTimeKind.Utc).AddTicks(160),
                            Email = "user@gmail.com",
                            Name = "user",
                            PasswordHash = "$2a$11$thP6xStr5tUSkrOdxQOFF.ywygzWwjgWpWKYwW.3pgin6pCz.XsE6"
                        });
                });

            modelBuilder.Entity("Common.Domain.UserProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("Common.Domain.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Common.Domain.Column", b =>
                {
                    b.HasOne("Common.Domain.SqlType", "SqlType")
                        .WithMany("Columns")
                        .HasForeignKey("SqlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SqlType");
                });

            modelBuilder.Entity("Common.Domain.ColumnProperty", b =>
                {
                    b.HasOne("Common.Domain.Column", null)
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.DataBaseIndexType", b =>
                {
                    b.HasOne("Common.Domain.DataBase", null)
                        .WithMany()
                        .HasForeignKey("DataBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.IndexType", null)
                        .WithMany()
                        .HasForeignKey("IndexTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.DataBaseType", b =>
                {
                    b.HasOne("Common.Domain.DataBase", null)
                        .WithMany()
                        .HasForeignKey("DataBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.SqlType", null)
                        .WithMany()
                        .HasForeignKey("SqlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.Index", b =>
                {
                    b.HasOne("Common.Domain.IndexType", "IndexType")
                        .WithMany()
                        .HasForeignKey("IndexTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IndexType");
                });

            modelBuilder.Entity("Common.Domain.IndexColumn", b =>
                {
                    b.HasOne("Common.Domain.Column", null)
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Index", null)
                        .WithMany()
                        .HasForeignKey("IndexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.LanguageOrm", b =>
                {
                    b.HasOne("Common.Domain.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Orm", null)
                        .WithMany()
                        .HasForeignKey("OrmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.LanguageType", b =>
                {
                    b.HasOne("Common.Domain.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Common.Domain.LanguageTypeSqlType", b =>
                {
                    b.HasOne("Common.Domain.LanguageType", null)
                        .WithMany()
                        .HasForeignKey("LanguageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.SqlType", null)
                        .WithMany()
                        .HasForeignKey("SqlTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.Project", b =>
                {
                    b.HasOne("Common.Domain.DataBase", "DataBase")
                        .WithMany("Projects")
                        .HasForeignKey("DataBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataBase");
                });

            modelBuilder.Entity("Common.Domain.ProjectTable", b =>
                {
                    b.HasOne("Common.Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Table", null)
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.Relation", b =>
                {
                    b.HasOne("Common.Domain.RelationAction", "OnDelete")
                        .WithMany()
                        .HasForeignKey("OnDeleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.RelationAction", "OnUpdate")
                        .WithMany()
                        .HasForeignKey("OnUpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Column", "SourceColumn")
                        .WithMany()
                        .HasForeignKey("SourceColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Column", "TargetColumn")
                        .WithMany()
                        .HasForeignKey("TargetColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnDelete");

                    b.Navigation("OnUpdate");

                    b.Navigation("SourceColumn");

                    b.Navigation("TargetColumn");
                });

            modelBuilder.Entity("Common.Domain.TableColumn", b =>
                {
                    b.HasOne("Common.Domain.Column", null)
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.Table", null)
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.UserProject", b =>
                {
                    b.HasOne("Common.Domain.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.UserRole", b =>
                {
                    b.HasOne("Common.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Domain.DataBase", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Common.Domain.SqlType", b =>
                {
                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
